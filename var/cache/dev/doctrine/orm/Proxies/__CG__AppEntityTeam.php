<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Team extends \App\Entity\Team implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Name', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Year', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Stadium', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'NumberOfTitles', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Logo', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Points', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Win', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Loses', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Draws', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'players', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'games', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'trophies', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'coach'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Name', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Year', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Stadium', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'NumberOfTitles', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Logo', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Points', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Win', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Loses', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'Draws', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'players', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'games', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'trophies', '' . "\0" . 'App\\Entity\\Team' . "\0" . 'coach'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Team $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $Name): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$Name]);

        return parent::setName($Name);
    }

    /**
     * {@inheritDoc}
     */
    public function getYear(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYear', []);

        return parent::getYear();
    }

    /**
     * {@inheritDoc}
     */
    public function setYear(int $Year): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYear', [$Year]);

        return parent::setYear($Year);
    }

    /**
     * {@inheritDoc}
     */
    public function getStadium(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStadium', []);

        return parent::getStadium();
    }

    /**
     * {@inheritDoc}
     */
    public function setStadium(?string $Stadium): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStadium', [$Stadium]);

        return parent::setStadium($Stadium);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumberOfTitles(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumberOfTitles', []);

        return parent::getNumberOfTitles();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumberOfTitles(?int $NumberOfTitles): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumberOfTitles', [$NumberOfTitles]);

        return parent::setNumberOfTitles($NumberOfTitles);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogo(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogo', []);

        return parent::getLogo();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogo(?string $Logo): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogo', [$Logo]);

        return parent::setLogo($Logo);
    }

    /**
     * {@inheritDoc}
     */
    public function getPoints(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoints', []);

        return parent::getPoints();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoints(?int $Points): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoints', [$Points]);

        return parent::setPoints($Points);
    }

    /**
     * {@inheritDoc}
     */
    public function getWin(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWin', []);

        return parent::getWin();
    }

    /**
     * {@inheritDoc}
     */
    public function setWin(?int $Win): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWin', [$Win]);

        return parent::setWin($Win);
    }

    /**
     * {@inheritDoc}
     */
    public function getLoses(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLoses', []);

        return parent::getLoses();
    }

    /**
     * {@inheritDoc}
     */
    public function setLoses(?int $Loses): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLoses', [$Loses]);

        return parent::setLoses($Loses);
    }

    /**
     * {@inheritDoc}
     */
    public function getDraws(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDraws', []);

        return parent::getDraws();
    }

    /**
     * {@inheritDoc}
     */
    public function setDraws(?int $Draws): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDraws', [$Draws]);

        return parent::setDraws($Draws);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?\App\Entity\Owner
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?\App\Entity\Owner $owner): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlayers(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlayers', []);

        return parent::getPlayers();
    }

    /**
     * {@inheritDoc}
     */
    public function addPlayer(\App\Entity\Player $player): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPlayer', [$player]);

        return parent::addPlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function removePlayer(\App\Entity\Player $player): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePlayer', [$player]);

        return parent::removePlayer($player);
    }

    /**
     * {@inheritDoc}
     */
    public function getGames(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGames', []);

        return parent::getGames();
    }

    /**
     * {@inheritDoc}
     */
    public function addGame(\App\Entity\Games $game): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGame', [$game]);

        return parent::addGame($game);
    }

    /**
     * {@inheritDoc}
     */
    public function removeGame(\App\Entity\Games $game): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeGame', [$game]);

        return parent::removeGame($game);
    }

    /**
     * {@inheritDoc}
     */
    public function getTrophies(): ?\App\Entity\Trophies
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTrophies', []);

        return parent::getTrophies();
    }

    /**
     * {@inheritDoc}
     */
    public function setTrophies(?\App\Entity\Trophies $trophies): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTrophies', [$trophies]);

        return parent::setTrophies($trophies);
    }

    /**
     * {@inheritDoc}
     */
    public function getCoach(): ?\App\Entity\Coach
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCoach', []);

        return parent::getCoach();
    }

    /**
     * {@inheritDoc}
     */
    public function setCoach(\App\Entity\Coach $coach): \App\Entity\Team
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCoach', [$coach]);

        return parent::setCoach($coach);
    }

}
